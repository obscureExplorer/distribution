import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import domain.EduClassConflict;
import domain.Day;
import domain.Period;
import domain.Student;
import domain.Teacher;
import domain.Timeslot;
import domain.EduClass;
import domain.Room;
import domain.RealEduClass;

global HardSoftScoreHolder scoreHolder;


// 检查不同班级之间是否存在冲突
rule "conflictingDiffirentEduClassInSamePeriod"
    when
        $eduClassConflict : EduClassConflict($leftEduClass : leftEduClass,$rightEduClass : rightEduClass)
        $leftRealEduClass: RealEduClass(eduClass == $leftEduClass, $period : period, period != null, $leftId : id)
        $rightRealEduClass : RealEduClass(eduClass == $rightEduClass, period == $period, this != $leftRealEduClass)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $eduClassConflict.getConflictCount());
end

// 检查同一班级之间是否存在冲突
rule "conflictingSameEduClassInSamePeriod"
    when
        RealEduClass($leftId : id, $leftEduClass : eduClass, $period : period, period != null)
        RealEduClass(eduClass == $leftEduClass, period == $period, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - 1);
end

//同一个时间和地点的冲突
rule "roomOccupancy"
    when
        RealEduClass($leftId : id, period != null, $period : period, room != null, $room : room)
        // $leftLecture has lowest id of the period+room combo
        not RealEduClass(period == $period, room == $room, id < $leftId)
        // rightLecture has the same period
        RealEduClass(period == $period, room == $room, id > $leftId, $rightId : id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
