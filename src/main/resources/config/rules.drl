import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import domain.EduClassConflict;
import domain.Day;
import domain.LectureOfEduClass;
import domain.Period;
import domain.Student;
import domain.Teacher;
import domain.Timeslot;
import domain.EduClass;
import domain.Room;
import domain.LectureOfEduClass;

global HardSoftScoreHolder scoreHolder;

// 强约束条件
// 同个时间点，有上课的不同班级之间存在冲突
rule "differentEduClassInSamePeriod"
    when
        $eduClassConflict : EduClassConflict($leftEduClass : leftEduClass,$rightEduClass : rightEduClass)
        LectureOfEduClass(eduClass == $leftEduClass, $period : period, period != null, $leftId : id)
        LectureOfEduClass(eduClass == $rightEduClass, period == $period, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $eduClassConflict.getConflictCount());
end

// 班级与班级自己有冲突
rule "sameEduClassInSamePeriod"
    when
        //eduClass不可能为null，因此不用判断了。
        LectureOfEduClass($leftId : id, $period : period, period != null, $room : room, room != null,$eduClass : eduClass)
        not LectureOfEduClass(id < $leftId , $period == period, $room == room, $eduClass == eduClass)
        LectureOfEduClass(id > $leftId, period == $period , $eduClass == eduClass)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$eduClass.getStudents().size());
end

// 同个时间点，同一个老师之间的冲突
rule "sameTeacherInSamePeriod"
    when
        LectureOfEduClass($leftId : id, $period : period, period != null, room != null, $teacher :teacher)
        not LectureOfEduClass(id < $leftId, $period == period, room != null, $teacher == teacher)
        LectureOfEduClass(id > $leftId, period == $period, room != null, teacher == $teacher)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 同一个时间、同一个地点的冲突
rule "roomOccupancy"
    when
        LectureOfEduClass($leftId : id, period != null, $period : period, room != null, $room : room)
        // $leftLecture是相同的period和room里最小的
        // 例如1、2、3、4。这个规则，只对(1,2)、（1,3）、（1、4）触发，对（2，3）、（2,4）不触发
        not LectureOfEduClass(id < $leftId, period == $period, room == $room)
        // rightLecture的period和上面的是一样
        LectureOfEduClass(period == $period, room == $room, id > $leftId, $rightId : id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//不能超过老师的最大授课班级数
rule "maxNum"
    when
        $teacher : Teacher()
        accumulate(
            $eduClass : EduClass() and exists LectureOfEduClass(eduClass == $eduClass,teacher == $teacher);
            $eduClassCount : count($eduClass);
            $eduClassCount > $teacher.maxClassNum
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, (int)($teacher.getMaxClassNum() - $eduClassCount ));
end


/*
rule "sameRoom"
    when
        $administrativeClass : EduClass(type == 0)
        accumulate (
            $room : Room()
            and exists Lecture(room == $room,eduClass == $administrativeClass,period != null);
            $roomCount : count($room);
            $roomCount > 1
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1-$roomCount.intValue());
end
*/


// 弱约束条件
//同一个course的lecture应该在同一间教室
/*
rule "roomStability"
    when
        $course : Course(type != 0)
        accumulate (
            $room : Room()
            and exists Lecture(course == $course, room == $room);
            $roomCount : count($room);
            $roomCount > 1
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -($roomCount.intValue() - 1));
end*/
