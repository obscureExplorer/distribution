import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import domain.EduClassConflict;
import domain.Day;
import domain.LectureOfEduClass;
import domain.Period;
import domain.Teacher;
import domain.Timeslot;
import domain.EduClass;
import domain.Room;
import domain.EduClass;
import domain.Day;
import domain.Subject;
import domain.PeriodPenalty;
import domain.ResourceTypeEnum;
import domain.RuleTypeEnum;
import domain.AdjacentPenalty;
import domain.AdjacentLecture;
import domain.TeacherAssignment;
global org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder scoreHolder;

//global HardSoftScoreHolder scoreHolder;

// 强约束条件
// 同个时间点，有上课的不同班级之间存在冲突
rule "differentEduClassInSamePeriod"
    when
        $eduClassConflict : EduClassConflict($leftEduClass : leftEduClass,$rightEduClass : rightEduClass)
        LectureOfEduClass(eduClass == $leftEduClass, $period : period, period != null, $leftId : id)
        LectureOfEduClass(eduClass == $rightEduClass, period == $period, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $eduClassConflict.getConflictCount());
end

// 班级与班级自己有冲突
rule "sameEduClassInSamePeriod"
    when
        //eduClass不可能为null，因此不用判断了。
        LectureOfEduClass($leftId : id, $period : period, period != null, $room : room, room != null,$eduClass : eduClass)
        not LectureOfEduClass(id < $leftId , $period == period, $room == room, $eduClass == eduClass)
        LectureOfEduClass(id > $leftId, period == $period , $eduClass == eduClass)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$eduClass.getStudents().size());
end

// 同个时间点，同一个老师之间的冲突
rule "sameTeacherInSamePeriod"
    when
        LectureOfEduClass($leftId : id, $period : period, period != null, room != null, $teacher :teacher)
        not LectureOfEduClass(id < $leftId, $period == period, room != null, $teacher == teacher)
        LectureOfEduClass(id > $leftId, period == $period, room != null, teacher == $teacher)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 同一个时间、同一个地点的冲突
rule "roomOccupancy"
    when
        LectureOfEduClass($leftId : id, period != null, $period : period, room != null, $room : room)
        // $leftLecture是相同的period和room里最小的
        // 例如1、2、3、4。这个规则，只对(1,2)、（1,3）、（1、4）触发，对（2，3）、（2,4）不触发
        not LectureOfEduClass(id < $leftId, period == $period, room == $room)
        // rightLecture的period和上面的是一样
        LectureOfEduClass(period == $period, room == $room, id > $leftId, $rightId : id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//不能超过老师对应科目的最大授课班级数
rule "maxNum"
    when
        TeacherAssignment($teacher: teacher,$subject : subject, $maxClassNo : maxClassNo)
        accumulate(
            $eduClass : EduClass() and exists LectureOfEduClass(eduClass == $eduClass,teacher == $teacher, subject == $subject);
            $eduClassCount : count($eduClass);
            $eduClassCount > $maxClassNo
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, (int)($maxClassNo - $eduClassCount));
end

//中等约束条件
//班级不排课
rule "eduClassUnavailablePeriod"
    when
        $unavailablePeriod : PeriodPenalty($name : name, $subjectName : subjectName, $period : period,resourceType == ResourceTypeEnum.EDUCLASS,ruleType == RuleTypeEnum.UNAVAILABILITY)
        LectureOfEduClass(eduClass.name == $name,subject.name == $subjectName,period == $period)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,-1);
end
//教师不排课
rule "teacherUnavailablePeriod"
    when
        $unavailablePeriod : PeriodPenalty($name : name, $subjectName : subjectName, $period : period,resourceType == ResourceTypeEnum.TEACHER,ruleType == RuleTypeEnum.UNAVAILABILITY)
        LectureOfEduClass(teacher.name == $name,subject.name == $subjectName, period == $period)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,-1);
end
//班级要排课
rule "eduClassAvailablePeriod"
    when
        $availablePeriod : PeriodPenalty($name : name, $subjectName : subjectName, $period : period,resourceType == ResourceTypeEnum.EDUCLASS,ruleType == RuleTypeEnum.AVAILABILITY)
        not LectureOfEduClass(eduClass.name == $name,subject.name == $subjectName, period == $period)
    then
        scoreHolder.addMediumConstraintMatch(kcontext,-1);
end
// 弱约束条件
// 班级课时分散
rule "fairness"
    when
        $day : Day()
        $subject: Subject()
        $eduClass : EduClass()
        accumulate(
            $lecture : LectureOfEduClass(period != null, subject == $subject, period.day == $day, eduClass == $eduClass);
            $lectureCount : count($lecture);
            $lectureCount > 0
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -( $lectureCount.intValue() * $lectureCount.intValue() ));
end
/*
//todo 同一个老师带的不同班级，尽量都在同一天上课
rule "sameDistribution"
    when
        $teacher : Teacher()
        $day : Day()
        LectureOfEduClass(teacher == $teacher,$eduClass : eduClass,period.day == $day)
    then

end
*/
/*

rule "insertAdjacent"
    salience 1
    when
        $subjectAdjacent : AdjacentPenalty($subjectName : subjectName, $teacherName : name)
        $period : Period()
        LectureOfEduClass(subject.name == $subjectName, teacher.name == $teacherName, $period == period)
        LectureOfEduClass(subject.name == $subjectName, teacher.name == $teacherName, period.timeslot.timeslotIndex == $period.timeslot.timeslotIndex + 1,period.day == $period.day)
    then
        insertLogical(new AdjacentLecture(subjectName,$teacherName))
end

//连堂
rule "adjacent"
    when
        $subjectAdjacent : AdjacentPenalty($subjectName : subjectName, $teacherName : name, $count : count)
        accumulate(
            $adjacentLecture : AdjacentLecture(subjectName == $subjectName, teacherName == $teacherName);
            $currentCount : count($adjacentLecture);
            $currentCount < $count
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $currentCount - $count);
end
*/
